[{"C:\\Users\\wbmmu\\Desktop\\electron\\pam\\pa-manager-firmware-uploader\\src\\reportWebVitals.js":"1","C:\\Users\\wbmmu\\Desktop\\electron\\pam\\pa-manager-firmware-uploader\\src\\App.js":"2","C:\\Users\\wbmmu\\Desktop\\electron\\pam\\pa-manager-firmware-uploader\\src\\components\\TopBar.js":"3","C:\\Users\\wbmmu\\Desktop\\electron\\pam\\pa-manager-firmware-uploader\\src\\index.js":"4","C:\\Users\\wbmmu\\Desktop\\electron\\pam\\pa-manager-firmware-uploader\\src\\styles.js":"5","C:\\Users\\wbmmu\\Desktop\\electron\\pam\\pa-manager-firmware-uploader\\src\\Updates.js":"6"},{"size":362,"mtime":1606278072237,"results":"7","hashOfConfig":"8"},{"size":1650,"mtime":1608951412996,"results":"9","hashOfConfig":"8"},{"size":1827,"mtime":1608950855811,"results":"10","hashOfConfig":"8"},{"size":547,"mtime":1608571331421,"results":"11","hashOfConfig":"8"},{"size":389,"mtime":1608909748190,"results":"12","hashOfConfig":"8"},{"size":4827,"mtime":1608951396906,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1wvrmsh",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"16"},"C:\\Users\\wbmmu\\Desktop\\electron\\pam\\pa-manager-firmware-uploader\\src\\reportWebVitals.js",[],["29","30"],"C:\\Users\\wbmmu\\Desktop\\electron\\pam\\pa-manager-firmware-uploader\\src\\App.js",["31"],"import { useEffect, useState } from 'react';\nimport { Modal, Spinner } from 'react-bootstrap';\nimport TopBar from './components/TopBar';\nimport Updates from './Updates';\n\nconst { ipcRenderer } = window.require('electron')\n\nfunction App() {\n\n  const [loadingModal, setLoadingModal] = useState({\n    show: false\n  })\n\n  useEffect(() => {\n    ipcRenderer.on('message', (e, theMessage) => {\n      console.log(theMessage)\n    })\n\n    ipcRenderer.on('app_version', (event, arg) => {\n      document.title = 'pa manager firmware uploader --- v' + arg.version;\n    });\n\n    ipcRenderer.on('uploading', () => {\n      showLoadingModal(true)\n    })\n\n    ipcRenderer.on('uploadFinished', (e, theDevices) => {\n      showLoadingModal(false)\n    })\n\n\n    ipcRenderer.send('reactIsReady')\n\n    return () => {\n      ipcRenderer.removeAllListeners('message');\n      ipcRenderer.removeAllListeners('app_version');\n      ipcRenderer.removeAllListeners('uploading');\n      ipcRenderer.removeAllListeners('uploadFinished');\n    }\n  }, [])\n\n  const showLoadingModal = (bool) => {\n    let tempLoadingModal = { ...loadingModal }\n    tempLoadingModal.show = bool\n    setLoadingModal(tempLoadingModal)\n  }\n\n  return (\n    <div>\n      <TopBar />\n      <Updates />\n      <Modal\n        show={loadingModal.show}\n        onHide={() => showLoadingModal(false)}\n        backdrop=\"static\"\n        keyboard={false}\n      >\n        <Modal.Header closeButton>\n          <Modal.Title>Uploading Firmware</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Spinner size=\"xl\" animation=\"border\" />\n        </Modal.Body>\n      </Modal>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\wbmmu\\Desktop\\electron\\pam\\pa-manager-firmware-uploader\\src\\components\\TopBar.js",[],"C:\\Users\\wbmmu\\Desktop\\electron\\pam\\pa-manager-firmware-uploader\\src\\index.js",[],"C:\\Users\\wbmmu\\Desktop\\electron\\pam\\pa-manager-firmware-uploader\\src\\styles.js",[],"C:\\Users\\wbmmu\\Desktop\\electron\\pam\\pa-manager-firmware-uploader\\src\\Updates.js",["32"],"import React, { useEffect, useState } from 'react'\r\nconst { ipcRenderer } = window.require('electron')\r\n\r\nexport default function Updates() {\r\n    const [show, setShow] = useState(false)\r\n    const [popupContents, setPopupContents] = useState({\r\n        contents: []\r\n    })\r\n\r\n    useEffect(() => {\r\n        console.log('Top Of Updates')\r\n        ipcRenderer.on('checkingForUpdates', () => {\r\n            console.log('Checking for updates')\r\n        })\r\n\r\n        ipcRenderer.on('updateAvailable', () => {\r\n            console.log('Downloading update')\r\n            let tempPopupContents = { ...popupContents }\r\n            tempPopupContents.contents = (\r\n                <div>\r\n                    A new version is being downloaded\r\n                    <table style={{ width: '100%' }}>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>\r\n                                    <progress style={{ width: '100%' }} max={100} value=\"0\" />\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>\r\n                                    <button onClick={() => setShow(false)}>close</button>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            )\r\n\r\n            setPopupContents(tempPopupContents)\r\n            setShow(true)\r\n        })\r\n\r\n        ipcRenderer.on('noUpdate', () => {\r\n            console.log('Up to date')\r\n        })\r\n\r\n        ipcRenderer.on('updateDownloaded', (e, releaseInfo) => {\r\n            console.log('Update Downloaded')\r\n            //console.log(releaseInfo)\r\n            let tempPopupContents = { ...popupContents }\r\n            tempPopupContents.contents = (\r\n                <div>\r\n                    <p>New update {\"v\" + releaseInfo.version} downloaded</p>\r\n                    <table>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>\r\n                                    <button onClick={() => setPopupContents()}>Update on exit</button>\r\n                                </td>\r\n                                <td>\r\n                                    <button onClick={() => {\r\n                                        ipcRenderer.send('installUpdate')\r\n                                        setShow(false)\r\n                                    }}>Update and restart app now</button>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            )\r\n\r\n            setPopupContents(tempPopupContents)\r\n            setShow(true)\r\n        })\r\n\r\n        ipcRenderer.on('updateError', (error) => {\r\n            console.log('Update Error', error,)\r\n        })\r\n\r\n        ipcRenderer.on('updateDownloadProgress', (e, progressPercent) => {\r\n            let tempPopupContents = { ...popupContents }\r\n            tempPopupContents.contents = (\r\n                <div>\r\n                    A new version is being downloaded\r\n                    <table style={{ width: '100%' }}>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>\r\n                                    <progress style={{ width: '100%' }} max=\"100\" value={Math.round(progressPercent).toString()} />\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>\r\n                                    <button onClick={() => setShow(false)}>hide</button>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            )\r\n            setPopupContents(tempPopupContents)\r\n        })\r\n\r\n        return () => {\r\n            ipcRenderer.removeAllListeners('checkingForUpdates')\r\n            ipcRenderer.removeAllListeners('updateAvailable')\r\n            ipcRenderer.removeAllListeners('noUpdate')\r\n            ipcRenderer.removeAllListeners('updateError')\r\n            ipcRenderer.removeAllListeners('updateDownloaded')\r\n            ipcRenderer.removeAllListeners('updateDownloadProgress')\r\n        }\r\n    }, [])\r\n\r\n    const makePopup = () => {\r\n        if (show === true) {\r\n            return (\r\n                <div style={{ position: 'fixed', bottom: '10px', right: '10px', backgroundColor: 'white', padding: '10px', boxShadow: '0px 0px 6px 2px', fontSize: '12px' }}>\r\n                    {popupContents.contents}\r\n                </div>\r\n            )\r\n        } else {\r\n            return <div></div>\r\n        }\r\n    }\r\n\r\n    return (\r\n        makePopup()\r\n    )\r\n}\r\n",{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":40,"column":6,"nodeType":"39","endLine":40,"endColumn":8,"suggestions":"40"},{"ruleId":"37","severity":1,"message":"41","line":112,"column":8,"nodeType":"39","endLine":112,"endColumn":10,"suggestions":"42"},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'showLoadingModal'. Either include it or remove the dependency array.","ArrayExpression",["45"],"React Hook useEffect has a missing dependency: 'popupContents'. Either include it or remove the dependency array.",["46"],"no-global-assign","no-unsafe-negation",{"desc":"47","fix":"48"},{"desc":"49","fix":"50"},"Update the dependencies array to be: [showLoadingModal]",{"range":"51","text":"52"},"Update the dependencies array to be: [popupContents]",{"range":"53","text":"54"},[1012,1014],"[showLoadingModal]",[4362,4364],"[popupContents]"]